{
  "version": "https://jsonfeed.org/version/1",
  "title": "Zach Parent",
  "home_page_url": "https://zachparent.com",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "Data for good. Good for you.",
  "author": {
    "name": "Zach Parent",
    "url": "https://zachparent.com"
  },
  "items": [{
      "id": "https://zachparent.com/zachparent-site/post/counting-ones-problem/",
      "url": "https://zachparent.com/zachparent-site/post/counting-ones-problem/",
      "title": "Counting Ones Problem",
      "content_html": "<h3 id=\"what-is-a-genetic-algorithm%3F\" tabindex=\"-1\">What is a genetic algorithm?</h3>\n<p>Genetic algorithms are a subset of evolutionary algorithms, in which we simulate the process of natural selection to evolve a population of solutions to a problem. To accomplish this, we need to represent the solutions in a way that allows us to perform the processes of natural selection (e.g. selection, mutation, and crossover operations).</p>\n<p>One common way to represent solutions in genetic algorithms is to use binary strings (e.g. <code>b'01010101'</code> is an 8-bit binary string). Each bit in the string represents a different aspect of the solution, and we can use the tools of combinatorics to efficiently create large numbers of diverse solutions.</p>\n<h3 id=\"the-%E2%80%9Ccounting-ones-problem%E2%80%9D\" tabindex=\"-1\">The “Counting Ones Problem”</h3>\n<p>As a simple example, we could simply begin with a random bitstring, and then iteratively apply mutation and selection operations to evolve the bitstring towards a target bitstring, in our case, a bitstring of all 1s.</p>\n<p>Let’s define the solution space formally.</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>Let </mtext><mi>X</mi><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mtext> where </mtext><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo><mspace linebreak=\"newline\"></mspace></mrow><annotation encoding=\"application/x-tex\">\\text{Let } X = \\{x_i\\}_{i=1}^n \\text{ where } x_i \\in \\{0, 1\\} \\\\\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">Let </span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> where </span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span><span class=\"mspace newline\"></span></span></span></span></p>\n<p>This is a way to say that we have a bitstring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> of length <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, where each bit in the bitstring is either a 0 or a 1.</p>\n<h3 id=\"defining-a-fitness-function\" tabindex=\"-1\">Defining a fitness function</h3>\n<p>When iterating on solutions, we need a way to evaluate how good a solution is. One common approach is to assign a fitness score to the solution, which we can use to select the fittest solutions for keeping in the next generation.</p>\n<p>Keeping our solution simple, and sticking to the name “Counting Ones Problem”, let’s define our fitness function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> as the number of 1s in the binary representation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>.</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f(X) = \\sum_{i=1}^{n} x_i\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>We can take a look some example scores from the fitness function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> for a few values of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. When a bit is 1, it contributes 1 to the score, and when a bit is 0, it doesn’t</p>\n<table>\n<thead>\n<tr>\n<th><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span></th>\n<th><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>000</code></td>\n<td>0</td>\n</tr>\n<tr>\n<td><code>001</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>110</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td><code>111</code></td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"the-algorithm\" tabindex=\"-1\">The algorithm</h3>\n<p>Now that we have defined the solution space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and our fitness function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>, we want to find the value of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> that maximizes the fitness function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">F(X)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>We can use a genetic algorithm to find this value.</p>\n<blockquote>\n<p><strong>💡 Note: you may find this example trivial, and that’s because it is! The Counting Ones Problem is a classic problem in genetic algorithms, and it is a good way to understand the basic concepts of genetic algorithms.</strong></p>\n</blockquote>\n<h4 id=\"steps\" tabindex=\"-1\">Steps</h4>\n<ul>\n<li>\n<p>We initialize a random value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>t</mi></msub><mo>=</mo><msub><mi>X</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_t = X_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>\n<p>Each generation we <strong>mutate</strong> the current value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">X_{t-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> to get a new value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. (more on this in the <a href=\"#mutation\">Mutation section</a>)</p>\n</li>\n<li>\n<p>We then calculate the fitness of the new value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and compare it to the fitness of the previous value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">X_{t-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>, and select the value with the highest fitness to be the current value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n</li>\n<li>\n<p>We repeat this process until the fitness of the current value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is equal to the total number of bits <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, i.e. until <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mi>t</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">F(X_t) = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>t</mi></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">X_t = \\{1, 1, \\dots, 1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>.</p>\n</li>\n</ul>\n<h4 id=\"mutation\" tabindex=\"-1\">Mutation</h4>\n<ul>\n<li>To mutate the current value, we flip each bit with a probability of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span></span></span></span>.</li>\n<li>This means that each bit has an equal chance of being flipped from a 0 to a 1 or a 1 to a 0. The expected number of bits flipped is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, but it’s possible that no bits are flipped, or all bits are flipped.</li>\n</ul>\n<p>Let’s implement this in code.</p>\n<h3 id=\"implementation\" tabindex=\"-1\">Implementation</h3>\n<p>We’ll need to import a few libraries to help us with our implementation.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint<span class=\"token punctuation\">,</span> seed<br><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np<br><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd<br><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt<br><span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns<br><br>bits <span class=\"token operator\">=</span> <span class=\"token number\">8</span></code></pre>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Fitness</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>bit_count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">flip_bit</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">:</span><br>    <span class=\"token triple-quoted-string string\">\"\"\"Flip a specific bit in the given integer value.\"\"\"</span><br>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">:</span><br>    <span class=\"token triple-quoted-string string\">\"\"\"Mutate the given integer value by flipping all bits with a probability of 1/bits.\"\"\"</span><br>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span>bits<span class=\"token punctuation\">:</span><br>            value <span class=\"token operator\">=</span> flip_bit<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">return</span> value<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">adapt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">:</span><br>    <span class=\"token triple-quoted-string string\">\"\"\"Adapt the given value towards the target by either keeping it or mutating it.\"\"\"</span><br>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> mutate<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> Fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Now we’ve defined the <code>Fitness</code> function for evaluating solutions, and we have the <code>mutate</code> and <code>adapt</code> functions for evolving the solutions.</p>\n<p>We’ll initialize a random value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and a target value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mi>T</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and then iteratively apply the <code>adapt</code> function to evolve the solution towards the target.</p>\n<pre class=\"language-python\"><code class=\"language-python\">seed<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>initial_value<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8 <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span>bits <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>target<span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>uint8 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span>bits <span class=\"token operator\">-</span> <span class=\"token number\">1</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Initial value: \\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>initial_value<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">{</span>bits<span class=\"token punctuation\">}</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Target value: \\t</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">{</span>bits<span class=\"token punctuation\">}</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><br><br>value <span class=\"token operator\">=</span> initial_value<br>generation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>value_history <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><br><span class=\"token keyword\">while</span> Fitness<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> bits<span class=\"token punctuation\">:</span><br>    value <span class=\"token operator\">=</span> adapt<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><br>    value_history<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><br>    generation <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><br><br>df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>value_history<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>df<span class=\"token punctuation\">[</span><span class=\"token string\">'bitstring'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">{</span>bits<span class=\"token punctuation\">}</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><br>df<span class=\"token punctuation\">[</span><span class=\"token string\">'fitness'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> Fitness<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>df<span class=\"token punctuation\">[</span><span class=\"token string\">'generation'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>index<br>df<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<pre><code>Initial value: \t01000100\nTarget value: \t11111111\n</code></pre>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Value</th>\n      <th>bitstring</th>\n      <th>fitness</th>\n      <th>generation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>68</td>\n      <td>01000100</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>68</td>\n      <td>01000100</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>69</td>\n      <td>01000101</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>69</td>\n      <td>01000101</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>77</td>\n      <td>01001101</td>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>And now, some plots to visualize the evolution of the solutions.</p>\n<pre class=\"language-python\"><code class=\"language-python\">plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'generation'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'fitness'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Generation'</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Fitness'</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Fitness over Generations'</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br></code></pre>\n<p><img src=\"/zachparent-site/counting-ones-problem_files/counting-ones-problem_13_0.png\" alt=\"png\"></p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Create a binary matrix where 1 represents a correct bit and 0 represents an incorrect bit</span><br>binary_matrix <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'bitstring'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>target_bit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> bit<span class=\"token punctuation\">,</span> target_bit <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">{</span>bits<span class=\"token punctuation\">}</span>b<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>heatmap_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>binary_matrix<span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>plt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>sns<span class=\"token punctuation\">.</span>heatmap<span class=\"token punctuation\">(</span>heatmap_data<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'YlGnBu'</span><span class=\"token punctuation\">,</span> cbar_kws<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Bit Correctness'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ticks'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Bit Correctness over Generations'</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Bit Position'</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Generation'</span><span class=\"token punctuation\">)</span><br><br>plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'generation'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> bits <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br></code></pre>\n<p><img src=\"/zachparent-site/counting-ones-problem_files/counting-ones-problem_14_0.png\" alt=\"png\"></p>\n<p>One thing I like about this particular example is how around generation 15, the algorithm drops the 1 in position 4, in exchange for 2 1s in positions 0 and 2. This illustrates the stochastic nature of the algorithm, and demonstrates the tradeoffs between exploration and exploitation, a key phenomenon in the study of evolutionary algorithms.</p>\n<h3 id=\"conclusion\" tabindex=\"-1\">Conclusion</h3>\n<p>This was a simple example to introduce the concept of genetic algorithms, and to showcase the power of these algorithms to evolve solutions to problems. We used a bitstring representation of the solutions, and a fitness function that counted the number of 1s in the bitstring. We then iteratively applied mutation and selection operations to evolve the solutions towards the target bitstring of all 1s.</p>\n<h3 id=\"future-work\" tabindex=\"-1\">Future work</h3>\n<p>What if we were targeting a particular bitstring, e.g. <code>10110110</code>, instead of all 1s?</p>\n<p>What if the bitstring represented a real number, or multiple real numbers, and our fitness function depended on those values nonlinearly?</p>\n<p>What if we included crossover operations into the algorithm?</p>\n",
      "date_published": "2024-10-06T00:00:00Z"
    },{
      "id": "https://zachparent.com/zachparent-site/post/binary-representation-of-real-numbers/",
      "url": "https://zachparent.com/zachparent-site/post/binary-representation-of-real-numbers/",
      "title": "Binary Representation of Real Numbers",
      "content_html": "<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</code></pre>\n<pre class=\"language-python\"><code class=\"language-python\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><br>epsilon <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><br>r <span class=\"token operator\">=</span> <span class=\"token number\">0.637197</span><br>expected_encoded_r <span class=\"token operator\">=</span> <span class=\"token string\">'1000101110110101000110'</span><br></code></pre>\n<pre class=\"language-python\"><code class=\"language-python\">k <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>ceil<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>log2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>epsilon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'k:\\t\\t'</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expected_k:\\t'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>expected_encoded_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<pre><code>k:\t\t 21\nexpected_k:\t 22\n</code></pre>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">enc</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span><br>    <span class=\"token comment\"># Original equation: r_encoded = floor((r - a) / (b - a) * (2^k - 1) + 1/2)</span><br>    normalized_r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><br>    scaled_r <span class=\"token operator\">=</span> normalized_r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">**</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>    rounded_r <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>scaled_r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br>    binary_representation <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>rounded_r<span class=\"token punctuation\">:</span><span class=\"token format-spec\">b</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><br>    <span class=\"token keyword\">return</span> binary_representation<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">dec</span><span class=\"token punctuation\">(</span>encoded_r<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">:</span><br>    <span class=\"token comment\"># Original equation: a + int(encoded_r, 2) * (b-a)/(2**k - 1)</span><br>    encoded_int <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>encoded_r<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><br>    scaling_factor <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">**</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><br>    scaled_value <span class=\"token operator\">=</span> encoded_int <span class=\"token operator\">*</span> scaling_factor<br>    decoded_r <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> scaled_value<br>    <span class=\"token keyword\">return</span> decoded_r</code></pre>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'r:\\t\\t\\t'</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expected_encoded_r:\\t'</span><span class=\"token punctuation\">,</span> expected_encoded_r<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'encoded_r:\\t\\t'</span><span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dec(encoded_r):\\t\\t'</span><span class=\"token punctuation\">,</span> dec<span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rounded dec(encoded_r):\\t'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>dec<span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>log10<span class=\"token punctuation\">(</span>epsilon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<pre><code>r:\t\t\t 0.637197\nexpected_encoded_r:\t 1000101110110101000110\n\nencoded_r:\t\t 100010111011010100011\ndec(encoded_r):\t\t 0.637196844671652\nrounded dec(encoded_r):\t 0.637197\n</code></pre>\n",
      "date_published": "2024-10-06T00:00:00Z"
    },{
      "id": "https://zachparent.com/zachparent-site/post/deadbeef-decrementation/",
      "url": "https://zachparent.com/zachparent-site/post/deadbeef-decrementation/",
      "title": "Deadbeef Decrementation",
      "content_html": "<pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token comment\">;run on Linux with: nasm -felf64 decrement.asm &amp;&amp; ld decrement.o &amp;&amp; ./a.out</span><br><br><span class=\"token keyword\">global _start</span><br><br><span class=\"token keyword\">section .text</span><br><br><span class=\"token label function\">_start:</span><br>  mov <span class=\"token register variable\">rax</span>, <span class=\"token number\">0xDEADBEEF</span><br>  call decrement<br>  call exit<br><br><span class=\"token label function\">decrement:</span><br>  dec <span class=\"token register variable\">rax</span><br>  cmp <span class=\"token register variable\">rax</span>, <span class=\"token number\">0</span><br>  jg decrement<br>  ret<br><br><span class=\"token label function\">exit:</span><br>  mov <span class=\"token register variable\">rax</span>, <span class=\"token number\">60</span><br>  syscall<br><span class=\"token string\">``</span></code></pre>\n",
      "date_published": "2016-10-09T00:00:00Z"
    },{
      "id": "https://zachparent.com/zachparent-site/interior-crocodile-alligator/",
      "url": "https://zachparent.com/zachparent-site/interior-crocodile-alligator/",
      "title": "Interior Crocodile Alligator, I Drive a Chevrolet Movie Theater",
      "content_html": "<p>To truly understand the captivating phenomenon that is the <a href=\"https://www.youtube.com/watch?v=0OEbuDP5Yys\">Interior Crocodile Alligator song</a>, you must be familiar with its <a href=\"https://youtu.be/UXQ38gUsB20\">history</a>.</p>\n",
      "date_published": "2008-09-19T00:00:00Z"
    },{
      "id": "https://zachparent.com/zachparent-site/post/why-my-practice-of-thelema-makes-me-better-at-world-of-warcraft/",
      "url": "https://zachparent.com/zachparent-site/post/why-my-practice-of-thelema-makes-me-better-at-world-of-warcraft/",
      "title": "Why My Practice of Thelema Makes Me Better at World of Warcraft",
      "content_html": "<p>⛧⛧⛧</p>\n<p>ivil wea qep</p>\n<p>⛧⛧⛧</p>\n",
      "date_published": "1974-09-09T00:00:00Z"
    },{
      "id": "https://zachparent.com/zachparent-site/post/shrek-predicted-the-covid-19-pandemic/",
      "url": "https://zachparent.com/zachparent-site/post/shrek-predicted-the-covid-19-pandemic/",
      "title": "Shrek Predicted the COVID-19 Pandemic",
      "content_html": "<p>Please watch <a href=\"https://youtu.be/dQw4w9WgXcQ\">this informational video</a> to learn more.</p>\n<p>Thank you for your time.</p>\n",
      "date_published": "1921-04-16T00:00:00Z"
    },{
      "id": "https://zachparent.com/zachparent-site/post/lorem-ipsum/",
      "url": "https://zachparent.com/zachparent-site/post/lorem-ipsum/",
      "title": "Lorem Ipsum",
      "content_html": "<h3 id=\"lorem\" tabindex=\"-1\">Lorem</h3>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Congue quisque egestas diam in arcu cursus euismod quis. Ac auctor augue mauris augue. Convallis tellus id interdum velit laoreet id donec ultrices. Aliquam eleifend mi in nulla posuere. Pretium quam vulputate dignissim suspendisse in est. Orci sagittis eu volutpat odio facilisis mauris sit. Non nisi est sit amet facilisis magna etiam tempor. Id diam maecenas ultricies mi eget. Sed velit dignissim sodales ut. Purus semper eget duis at. Pellentesque sit amet porttitor eget dolor morbi. Faucibus a pellentesque sit amet porttitor. Orci a scelerisque purus semper eget duis. Mauris commodo quis imperdiet massa tincidunt. Pulvinar elementum integer enim neque. In vitae turpis massa sed elementum. Rhoncus dolor purus non enim.</p>\n<h3 id=\"ipsum\" tabindex=\"-1\">Ipsum</h3>\n<p>Nunc non blandit massa enim nec dui nunc mattis enim. Lectus urna duis convallis convallis tellus. Maecenas volutpat blandit aliquam etiam. Vivamus arcu felis bibendum ut tristique et egestas quis. Amet aliquam id diam maecenas ultricies mi eget. In hac habitasse platea dictumst quisque sagittis purus sit. Non pulvinar neque laoreet suspendisse interdum consectetur libero id. Tempus imperdiet nulla malesuada pellentesque elit eget gravida cum sociis. Suscipit adipiscing bibendum est ultricies integer quis auctor elit. Adipiscing commodo elit at imperdiet dui accumsan sit amet. At augue eget arcu dictum varius duis. Purus viverra accumsan in nisl nisi. Ut pharetra sit amet aliquam.</p>\n<h3 id=\"dolor\" tabindex=\"-1\">Dolor</h3>\n<p>Nunc id cursus metus aliquam eleifend mi in nulla posuere. In fermentum posuere urna nec tincidunt praesent. Imperdiet massa tincidunt nunc pulvinar sapien et. Morbi tristique senectus et netus et. At quis risus sed vulputate odio ut enim blandit volutpat. Consectetur a erat nam at lectus. Adipiscing diam donec adipiscing tristique risus nec feugiat in. Dictum varius duis at consectetur lorem donec massa sapien. Adipiscing tristique risus nec feugiat in. Amet cursus sit amet dictum sit amet justo donec enim. Ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue eget. Condimentum lacinia quis vel eros. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Enim eu turpis egestas pretium aenean.</p>\n<h3 id=\"sit\" tabindex=\"-1\">Sit</h3>\n<p>Gravida neque convallis a cras semper auctor. Viverra mauris in aliquam sem. Dui nunc mattis enim ut tellus elementum sagittis vitae. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue. Turpis cursus in hac habitasse platea dictumst quisque. Lectus quam id leo in vitae. Nibh venenatis cras sed felis eget velit. Ut ornare lectus sit amet. Iaculis nunc sed augue lacus viverra vitae congue. Lobortis feugiat vivamus at augue eget. At lectus urna duis convallis convallis tellus id interdum velit. Enim ut tellus elementum sagittis vitae et. Placerat in egestas erat imperdiet sed. Tempor orci eu lobortis elementum nibh. Tempus urna et pharetra pharetra. Ut aliquam purus sit amet luctus venenatis. Nisi porta lorem mollis aliquam ut porttitor. Nunc pulvinar sapien et ligula ullamcorper malesuada proin. Odio euismod lacinia at quis risus sed vulputate.</p>\n<h3 id=\"amet\" tabindex=\"-1\">Amet</h3>\n<p>Risus nullam eget felis eget nunc lobortis. Malesuada fames ac turpis egestas integer eget aliquet nibh. Viverra accumsan in nisl nisi. Lorem ipsum dolor sit amet. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Eu volutpat odio facilisis mauris sit amet. Arcu bibendum at varius vel pharetra vel turpis nunc. Et tortor consequat id porta nibh venenatis. In tellus integer feugiat scelerisque varius. Etiam non quam lacus suspendisse faucibus interdum posuere. Ac auctor augue mauris augue neque gravida. Faucibus et molestie ac feugiat sed lectus vestibulum mattis. Proin libero nunc consequat interdum varius. Luctus accumsan tortor posuere ac ut. Mauris a diam maecenas sed enim ut sem viverra aliquet. Fames ac turpis egestas integer eget aliquet nibh.</p>\n",
      "date_published": "1918-11-04T00:00:00Z"
    },{
      "id": "https://zachparent.com/zachparent-site/post/son-of-lorem-ipsum/",
      "url": "https://zachparent.com/zachparent-site/post/son-of-lorem-ipsum/",
      "title": "Son of Lorem Ipsum",
      "content_html": "<h3 id=\"lorem\" tabindex=\"-1\">Lorem</h3>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Congue quisque egestas diam in arcu cursus euismod quis. Ac auctor augue mauris augue. Convallis tellus id interdum velit laoreet id donec ultrices. Aliquam eleifend mi in nulla posuere. Pretium quam vulputate dignissim suspendisse in est. Orci sagittis eu volutpat odio facilisis mauris sit. Non nisi est sit amet facilisis magna etiam tempor. Id diam maecenas ultricies mi eget. Sed velit dignissim sodales ut. Purus semper eget duis at. Pellentesque sit amet porttitor eget dolor morbi. Faucibus a pellentesque sit amet porttitor. Orci a scelerisque purus semper eget duis. Mauris commodo quis imperdiet massa tincidunt. Pulvinar elementum integer enim neque. In vitae turpis massa sed elementum. Rhoncus dolor purus non enim.</p>\n<h3 id=\"ipsum\" tabindex=\"-1\">Ipsum</h3>\n<p>Nunc non blandit massa enim nec dui nunc mattis enim. Lectus urna duis convallis convallis tellus. Maecenas volutpat blandit aliquam etiam. Vivamus arcu felis bibendum ut tristique et egestas quis. Amet aliquam id diam maecenas ultricies mi eget. In hac habitasse platea dictumst quisque sagittis purus sit. Non pulvinar neque laoreet suspendisse interdum consectetur libero id. Tempus imperdiet nulla malesuada pellentesque elit eget gravida cum sociis. Suscipit adipiscing bibendum est ultricies integer quis auctor elit. Adipiscing commodo elit at imperdiet dui accumsan sit amet. At augue eget arcu dictum varius duis. Purus viverra accumsan in nisl nisi. Ut pharetra sit amet aliquam.</p>\n<h3 id=\"dolor\" tabindex=\"-1\">Dolor</h3>\n<p>Nunc id cursus metus aliquam eleifend mi in nulla posuere. In fermentum posuere urna nec tincidunt praesent. Imperdiet massa tincidunt nunc pulvinar sapien et. Morbi tristique senectus et netus et. At quis risus sed vulputate odio ut enim blandit volutpat. Consectetur a erat nam at lectus. Adipiscing diam donec adipiscing tristique risus nec feugiat in. Dictum varius duis at consectetur lorem donec massa sapien. Adipiscing tristique risus nec feugiat in. Amet cursus sit amet dictum sit amet justo donec enim. Ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at augue eget. Condimentum lacinia quis vel eros. Tincidunt tortor aliquam nulla facilisi cras fermentum odio eu feugiat. Enim eu turpis egestas pretium aenean.</p>\n<h3 id=\"sit\" tabindex=\"-1\">Sit</h3>\n<p>Gravida neque convallis a cras semper auctor. Viverra mauris in aliquam sem. Dui nunc mattis enim ut tellus elementum sagittis vitae. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue. Turpis cursus in hac habitasse platea dictumst quisque. Lectus quam id leo in vitae. Nibh venenatis cras sed felis eget velit. Ut ornare lectus sit amet. Iaculis nunc sed augue lacus viverra vitae congue. Lobortis feugiat vivamus at augue eget. At lectus urna duis convallis convallis tellus id interdum velit. Enim ut tellus elementum sagittis vitae et. Placerat in egestas erat imperdiet sed. Tempor orci eu lobortis elementum nibh. Tempus urna et pharetra pharetra. Ut aliquam purus sit amet luctus venenatis. Nisi porta lorem mollis aliquam ut porttitor. Nunc pulvinar sapien et ligula ullamcorper malesuada proin. Odio euismod lacinia at quis risus sed vulputate.</p>\n<h3 id=\"amet\" tabindex=\"-1\">Amet</h3>\n<p>Risus nullam eget felis eget nunc lobortis. Malesuada fames ac turpis egestas integer eget aliquet nibh. Viverra accumsan in nisl nisi. Lorem ipsum dolor sit amet. Facilisis magna etiam tempor orci eu lobortis elementum nibh. Eu volutpat odio facilisis mauris sit amet. Arcu bibendum at varius vel pharetra vel turpis nunc. Et tortor consequat id porta nibh venenatis. In tellus integer feugiat scelerisque varius. Etiam non quam lacus suspendisse faucibus interdum posuere. Ac auctor augue mauris augue neque gravida. Faucibus et molestie ac feugiat sed lectus vestibulum mattis. Proin libero nunc consequat interdum varius. Luctus accumsan tortor posuere ac ut. Mauris a diam maecenas sed enim ut sem viverra aliquet. Fames ac turpis egestas integer eget aliquet nibh.</p>\n",
      "date_published": "1908-12-12T00:00:00Z"
    }
  ]
}